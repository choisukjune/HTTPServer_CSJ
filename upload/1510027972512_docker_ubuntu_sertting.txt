Docker Ubuntu Memo

도커이미지 우분투 최신버전
https://hub.docker.com/r/cxmcc/ubuntu-upstart/
docker run --cap-add=SYS_PTRACE cxmcc/ubuntu-upstart:16.04

우분투 버전확인
$ cat /etc/issue
Ubuntu 10.10 \n \l

또는

$  lsb_release -a
No LSB modules are available.
Distributor ID:        Ubuntu
Description:        Ubuntu 10.10
Release:        10.10
Codename:        maverick

apt-get install vim
apt-get ssh

- root 패스워드설정

sudo passwd

Enter new UNIX password:

Retype new UNIX password:


-- curl 설치

sudo apt-get update
sudo apt-get install curl

-- nodejs 설치

curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
sudo apt-get install -y nodejs

//npm설치
sudo apt-get install npm


우분투버전확인

--몽고디비설치
https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/?_ga=2.20170559.602108163.1509362416-1131269403.1509362416#install-mongodb-community-edition



apt-get install build-essential


크롬 설치
우부투 64bit를 사용할 경우, OS버전을 지정해주지 않고 PPA로 크롬을 설치하게 되면 나중에 패키지 정보 업데이트(apt-get update)시 경고문같은게 자꾸 뜹니다.

아래처럼 arch=amd64라고 현재 사용하는 우분투가 64bit임을 지정해주어야 합니다.
크롬을 위한 PPA를 sources.list.d에 추가해주고
$ wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
$ sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'


패키지 정보를 업데이트합니다.
$ sudo apt-get update


이제 크롬을 설치 할 수 있습니다
$ sudo apt-get install google-chrome-stable


설치 이후 확인해보면, 자동으로 생성된 google-chrome.list 파일이 보입니다.
$ ls /etc/apt/sources.list.d/
google-chrome.list  google.list


패지지 목록 업데이트할 때(apt-get update)  다음과 같은 에러가 발생할 수 있기 때문에
W: Target Packages (main/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1


설치를 위해 생성했던 파일을 지워줘야 합니다.
webnautes@note:~$ sudo rm -rf /etc/apt/sources.list.d/google.list



git

설치
The git version control system is installed with the following command

sudo apt install git
설정
Every git user should first introduce himself to git, by running these two commands:

git config --global user.email "you@example.com"
git config --global user.name "Your Name"



ens33     Link encap:Ethernet  HWaddr 00:0c:29:67:cc:40
          inet addr:192.168.17.128  Bcast:192.168.17.255  Mask:255.255.255.0
          inet6 addr: fe80::bbdf:8e3:527c:c0f6/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:25 errors:0 dropped:0 overruns:0 frame:0
          TX packets:93 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:3349 (3.3 KB)  TX bytes:11342 (11.3 KB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:187 errors:0 dropped:0 overruns:0 frame:0
          TX packets:187 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:14668 (14.6 KB)  TX bytes:14668 (14.6 KB)

atom editor 설치

sudo add-apt-repository ppa:webupd8team/atom
sudo apt-get update
sudo apt-get install atom


1. github에 로그인

2. https://github.com/settings/profile 로 이동 (Settings)

3. https://github.com/settings/keys 로 이동 (SSH and GPG keys)

4. New SSH key 버튼 클릭

5. SSH key 식별할 이름을 대충 적고, ssh public key(공개키) 내용을 붙여넣는다

** key 생성 방법
==========================
$ ssh-keygen -t rsa
공개키 및 비밀키 생성
엔터 3번 (인증 비번 설정 안함 + 유저 홈 디렉토리 밑 .ssh에 키 생성)

$ cd ~/.ssh
$ ls
id_rsa id_rsa.pub
.pub가 붙은 건 공개키, 안붙은 건 비밀키
==========================

6. github 프로젝트 페이지에 가서 clone or download 버튼 클릭, Use SSH 클릭, 링크 복사

7. git local project folder에서 $ git remote set-url origin 복사한_링크

8. 이제 git push하면 묻지도 따지지도 않고 바로 remote repository인 github에 push하게 된다
[출처] Github에 username, password 없이 push하기|작성자 Curycu

ubuntu 16.04 에서 Redis 를 설치



Redis에 대해 조금 알아보기도 했고, 한번 깔아봐야겠다고 해서

일단 개발서버에 깔기로 결정




$ sudo apt-get install redis-server
1
$ sudo apt-get install redis-server


현재 개발서버는 ubuntu 16.04 이다.

뭐 14.04 도 똑같이 저렇게 패키지 깔면 문제없이 잘돌아갔던걸로 기억



* centOS 도 깔았지만 ubuntu 가 apt-get install 한방이면 되는 거라 훨씬 편리 하구먼.



Redis 접속

하기의 커멘드로 Redis에 접속할수 있으며, 기본 포트는 6379 로 잡힌다.


$ redis-cli
1
$ redis-cli


Redis 기본조작

기초적인 CRUD 를 해본다.

 저장된 리스트 출력

redis에 저장되어있는 데이터들을 조회

keys *


127.0.0.1:6379> keys *
(empty list or set)
1
2
127.0.0.1:6379> keys *
(empty list or set)


데이터 저장

key 를 지정하여 값을 저장한다.

set key value


127.0.0.1:6379> set bong8nim man
OK
1
2
127.0.0.1:6379> set bong8nim man
OK


데이터 읽기

key 를 지정하여 값을 불러온다.

get key


127.0.0.1:6379> get bong8nim
"man"
1
2
127.0.0.1:6379> get bong8nim
"man"


저장되어있는 데이터를 수정

저장되어 있는 key 를 지정하여 값을 불러온다.

set key value


127.0.0.1:6379> set bong8nim goodman
OK
127.0.0.1:6379> get bong8nim
"goodman"
1
2
3
4
127.0.0.1:6379> set bong8nim goodman
OK
127.0.0.1:6379> get bong8nim
"goodman"


데이터 삭제

저장되어 있는 key 를 지정하여 데이터를 삭제한다.

del key


127.0.0.1:6379> set bong8 nickname
OK
127.0.0.1:6379> KEYS *
1) "bong8nim"
2) "bong8"

127.0.0.1:6379> del bong8
(integer) 1
127.0.0.1:6379> KEYS *
1) "bong8nim"
1
2
3
4
5
6
7
8
9
10
127.0.0.1:6379> set bong8 nickname
OK
127.0.0.1:6379> KEYS *
1) "bong8nim"
2) "bong8"

127.0.0.1:6379> del bong8
(integer) 1
127.0.0.1:6379> KEYS *
1) "bong8nim"


리스트형태 데이터 저장

리스트 형태의 데이터를 만들어 저장한다.

lpush key value


127.0.0.1:6379> lpush dog mung
(integer) 1
1
2
127.0.0.1:6379> lpush dog mung
(integer) 1


리스트 데이터에 값추가

기존에 있는 리스트 형태의 데이터에 새로운 값을 추가한다.

lpush key value


127.0.0.1:6379> lpush dog mung
(integer) 2
1
2
127.0.0.1:6379> lpush dog mung
(integer) 2


리스트데이터 불러오기

인덱스를 지정하여 리스트의 데이터를 값을 읽어온다.

lrange key startindex endindex


127.0.0.1:6379> lrange dog 0 -1
1) "mung"
2) "mung"
1
2
3
127.0.0.1:6379> lrange dog 0 -1
1) "mung"
2) "mung"


데이터에 유효기간 설정

key에 유효 시간(초) 을 설정하여 데이터에 보존시간을 지정한다.

set key time(sec)


127.0.0.1:6379> set testvalue 100
OK

127.0.0.1:6379> KEYS *
1) "bong8nim"
2) "testvalue"
127.0.0.1:6379> setex testvalue 10 testvalue
OK
127.0.0.1:6379> get testvalue
"testvalue"

# 10초 삭제된것을 확인
127.0.0.1:6379> get testvalue
(nil)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
127.0.0.1:6379> set testvalue 100
OK

127.0.0.1:6379> KEYS *
1) "bong8nim"
2) "testvalue"
127.0.0.1:6379> setex testvalue 10 testvalue
OK
127.0.0.1:6379> get testvalue
"testvalue"

# 10초 삭제된것을 확인
127.0.0.1:6379> get testvalue
(nil)


전체 데이터 삭제

저장되어 있는 데이터를 삭제한다.

flushdb

Shell

127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
1
2
3
4
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)



use admin
db.createUser({ user: "사용자 계정",
  pwd: "패스워드",
  roles: [ "userAdminAnyDatabase",
    "dbAdminAnyDatabase",
    readWriteAnyDatabase"
  ]
})


# network interfaces
net:
  port: 27017
  #bindIp: 127.0.0.1


security:
    authorization: enabled


redis 설정
http://crystalcube.co.kr/175


sudo /etc/init.d/redis_6379 start
sudo /etc/init.d/redis_6379 stop

redis-cli mornitor
